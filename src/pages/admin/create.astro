---
import BaseLayout from "../../layouts/BaseLayout.astro";
import Card from "../../components/ui/Card.astro";
import Button from "../../components/ui/Button.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../consts";
---

<!-- TinyMCE ser√° carregado via CDN -->
<script is:inline src="https://cdn.jsdelivr.net/npm/tinymce@7/tinymce.min.js"
></script>
<script is:inline src="https://unpkg.com/turndown/dist/turndown.js"></script>

<BaseLayout
	title={`Criar Post - Admin - ${SITE_TITLE}`}
	description={SITE_DESCRIPTION}
	class="admin-create-page"
>
	<section class="admin-header">
		<div class="admin-header-content">
			<h1 class="admin-title">Criar Novo Post</h1>
			<Button href="/admin" variant="secondary">
				‚Üê Voltar ao Admin
			</Button>
		</div>
	</section>

	<section class="form-section">
		<Card variant="elevated" padding="lg" class="form-container">
			<div id="message-container"></div>

			<form id="create-form">
				<div class="form-group">
					<label for="title" class="form-label">T√≠tulo *</label>
					<input
						type="text"
						id="title"
						name="title"
						class="form-input"
						required
						placeholder="Digite o t√≠tulo do post"
					/>
				</div>

				<div class="form-group">
					<label for="description" class="form-label"
						>Descri√ß√£o *</label
					>
					<input
						type="text"
						id="description"
						name="description"
						class="form-input"
						required
						placeholder="Breve descri√ß√£o do post"
					/>
					<div class="help-text">
						Esta descri√ß√£o aparecer√° nas meta tags e listagem de
						posts
					</div>
				</div>

				<div class="form-group">
					<label for="pubDate" class="form-label"
						>Data de Publica√ß√£o *</label
					>
					<input
						type="date"
						id="pubDate"
						name="pubDate"
						class="form-input"
						required
					/>
				</div>

				<div class="form-group">
					<label for="heroImage" class="form-label"
						>Imagem de Destaque *</label
					>
					<div class="image-upload-container">
						<input
							type="text"
							id="heroImage"
							name="heroImage"
							class="form-input"
							placeholder="../../assets/blog-placeholder-1.jpg"
							required
							readonly
						/>
						<div class="upload-section">
							<input
								type="file"
								id="imageUpload"
								accept="image/jpeg,image/jpg,image/png,image/webp"
								style="display: none;"
							/>
							<button
								type="button"
								id="selectImageBtn"
								class="btn btn--secondary btn--sm upload-btn"
							>
								üìÅ Selecionar Imagem
							</button>
							<span id="uploadStatus" class="upload-status"
							></span>
						</div>
					</div>
					<div class="help-text">
						Selecione uma imagem do seu computador (ser√°
						automaticamente otimizada e convertida para WebP) ou
						digite o caminho manualmente (obrigat√≥rio)
					</div>
				</div>

				<div class="form-group">
					<label for="content" class="form-label">Conte√∫do *</label>
					<div id="tinymce-container">
						<textarea
							id="content"
							name="content"
							required
							placeholder="Digite o conte√∫do do post..."
						></textarea>
					</div>
					<div class="help-text">
						Use a barra de ferramentas do editor para formata√ß√£o
						visual. O conte√∫do ser√° convertido automaticamente para
						Markdown.
					</div>
				</div>

				<div class="form-actions">
					<button
						type="button"
						id="preview-btn"
						class="btn btn--ghost"
					>
						Visualizar
					</button>
					<button type="submit" class="btn btn--primary">
						Criar Post
					</button>
				</div>
			</form>
		</Card>
	</section>
</BaseLayout>

<style>
	.admin-create-page {
		padding-top: var(--space-4);
	}

	/* Admin Header */
	.admin-header {
		text-align: center;
		margin-bottom: var(--space-8);
	}

	.admin-header-content {
		max-width: 800px;
		margin: 0 auto;
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding-bottom: var(--space-6);
		border-bottom: var(--border-width-2) solid var(--color-neutral-300);
	}

	.admin-title {
		font-size: clamp(var(--font-size-2xl), 4vw, var(--font-size-3xl));
		font-weight: var(--font-weight-extrabold);
		color: var(--color-neutral-900);
		margin: 0;
		line-height: var(--line-height-tight);
	}

	/* Form Section */
	.form-section {
		max-width: 800px;
		margin: 0 auto;
	}

	.form-container {
		width: 100%;
	}

	.form-group {
		margin-bottom: var(--space-6);
	}

	.form-label {
		display: block;
		margin-bottom: var(--space-2);
		font-weight: var(--font-weight-semibold);
		color: var(--color-neutral-900);
		font-size: var(--font-size-base);
	}

	.form-input {
		width: 100%;
		padding: var(--space-3);
		border: var(--border-width-1) solid var(--color-neutral-300);
		border-radius: var(--border-radius-md);
		font-size: var(--font-size-base);
		font-family: var(--font-family-primary);
		transition: var(--transition-colors);
		background: var(--color-neutral-50);
		color: var(--color-neutral-900);
	}

	.form-input:focus {
		outline: none;
		border-color: var(--color-primary-500);
		box-shadow: 0 0 0 3px var(--color-primary-200);
	}

	.form-actions {
		display: flex;
		gap: var(--space-3);
		justify-content: flex-end;
		margin-top: var(--space-8);
	}

	.loading {
		opacity: 0.6;
		pointer-events: none;
	}

	.error-message {
		background: linear-gradient(135deg, #ff4757 0%, #ff3742 100%);
		color: white;
		padding: 1.2rem 1.5rem;
		border-radius: 12px;
		margin-bottom: 1.5rem;
		border: 3px solid #ff1744;
		box-shadow:
			0 8px 25px rgba(255, 23, 68, 0.4),
			0 0 0 4px rgba(255, 23, 68, 0.15),
			inset 0 1px 0 rgba(255, 255, 255, 0.2);
		animation:
			errorShake 0.6s ease-in-out,
			errorGlow 2s ease-in-out infinite;
		font-weight: 700;
		font-size: 1.1rem;
		text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
		position: relative;
		transform: translateZ(0);
	}

	.error-message::before {
		content: "";
		position: absolute;
		top: -2px;
		left: -2px;
		right: -2px;
		bottom: -2px;
		background: linear-gradient(45deg, #ff1744, #ff4757, #ff1744);
		border-radius: 14px;
		z-index: -1;
		animation: borderPulse 1.5s ease-in-out infinite;
	}

	.success-message {
		background: var(--color-success-50);
		color: var(--color-success-700);
		padding: var(--space-3);
		border-radius: var(--border-radius-md);
		margin-bottom: var(--space-4);
		border: var(--border-width-1) solid var(--color-success-200);
	}

	.help-text {
		font-size: var(--font-size-sm);
		color: var(--color-neutral-600);
		margin-top: var(--space-1);
		line-height: var(--line-height-relaxed);
	}

	/* TinyMCE Customization */
	#tinymce-container {
		border: var(--border-width-1) solid var(--color-neutral-300);
		border-radius: var(--border-radius-md);
		overflow: hidden;
		background: var(--color-neutral-50);
	}

	.tox .tox-editor-header {
		border-bottom: var(--border-width-1) solid var(--color-neutral-300) !important;
	}

	.tox-tinymce {
		border: none !important;
		border-radius: var(--border-radius-md) !important;
	}

	.image-upload-container {
		display: flex;
		flex-direction: column;
		gap: var(--space-2);
	}

	.upload-section {
		display: flex;
		align-items: center;
		gap: var(--space-3);
	}

	.upload-btn {
		white-space: nowrap;
	}

	/* Bot√µes inline */
	.btn {
		display: inline-flex;
		align-items: center;
		justify-content: center;
		gap: var(--space-2);
		border: var(--border-width-1) solid transparent;
		border-radius: var(--border-radius-lg);
		font-family: var(--font-family-primary);
		font-weight: var(--font-weight-medium);
		text-decoration: none;
		text-align: center;
		cursor: pointer;
		transition: var(--transition-all);
		white-space: nowrap;
		user-select: none;
		position: relative;
		overflow: hidden;
	}

	.btn--sm {
		padding: var(--space-2) var(--space-3);
		font-size: var(--font-size-sm);
		min-height: 2rem;
	}

	.btn--primary {
		background: linear-gradient(
			135deg,
			var(--color-primary-600) 0%,
			var(--color-primary-700) 100%
		);
		color: white;
		box-shadow: var(--shadow-sm);
	}

	.btn--primary:hover:not(:disabled) {
		background: linear-gradient(
			135deg,
			var(--color-primary-700) 0%,
			var(--color-primary-800) 100%
		);
		transform: translateY(-1px);
		box-shadow: var(--shadow-md);
	}

	.btn--secondary {
		background: var(--color-neutral-50);
		color: var(--color-neutral-800);
		border-color: var(--color-neutral-300);
		box-shadow: var(--shadow-sm);
	}

	.btn--secondary:hover:not(:disabled) {
		background: var(--color-neutral-100);
		border-color: var(--color-neutral-400);
		transform: translateY(-1px);
		box-shadow: var(--shadow-md);
	}

	.btn--ghost {
		background: transparent;
		color: var(--color-primary-600);
		border: none;
	}

	.btn--ghost:hover:not(:disabled) {
		background: var(--color-primary-50);
		color: var(--color-primary-700);
	}

	.upload-status {
		font-size: var(--font-size-sm);
		font-weight: var(--font-weight-medium);
	}

	.upload-status.success {
		color: var(--color-success-600);
	}

	.upload-status.error {
		color: var(--color-error-600);
	}

	.upload-status.loading {
		color: var(--color-neutral-600);
	}

	.field-error {
		border-color: #ff1744 !important;
		box-shadow:
			0 0 0 4px rgba(255, 23, 68, 0.3) !important,
			0 0 15px rgba(255, 23, 68, 0.2) !important;
		animation: fieldErrorPulse 1s ease-in-out infinite;
		background-color: rgba(255, 23, 68, 0.05) !important;
	}

	@keyframes fieldErrorPulse {
		0%,
		100% {
			box-shadow:
				0 0 0 4px rgba(255, 23, 68, 0.3),
				0 0 15px rgba(255, 23, 68, 0.2);
		}
		50% {
			box-shadow:
				0 0 0 6px rgba(255, 23, 68, 0.5),
				0 0 25px rgba(255, 23, 68, 0.4);
		}
	}

	@keyframes errorShake {
		0%,
		100% {
			transform: translateX(0);
		}
		10%,
		30%,
		50%,
		70%,
		90% {
			transform: translateX(-3px);
		}
		20%,
		40%,
		60%,
		80% {
			transform: translateX(3px);
		}
	}

	@keyframes errorGlow {
		0%,
		100% {
			box-shadow:
				0 8px 25px rgba(255, 23, 68, 0.4),
				0 0 0 4px rgba(255, 23, 68, 0.15),
				inset 0 1px 0 rgba(255, 255, 255, 0.2);
		}
		50% {
			box-shadow:
				0 12px 35px rgba(255, 23, 68, 0.6),
				0 0 0 6px rgba(255, 23, 68, 0.25),
				inset 0 1px 0 rgba(255, 255, 255, 0.3);
		}
	}

	@keyframes borderPulse {
		0%,
		100% {
			opacity: 0.8;
		}
		50% {
			opacity: 1;
		}
	}

	/* Dark mode */
	@media (prefers-color-scheme: dark) {
		.admin-header-content {
			border-bottom-color: var(--color-neutral-400);
		}

		.admin-title {
			color: var(--color-neutral-900);
		}

		.form-label {
			color: var(--color-neutral-900);
		}

		.form-input {
			background: var(--color-neutral-200);
			color: var(--color-neutral-900);
			border-color: var(--color-neutral-400);
		}

		.form-input:focus {
			border-color: var(--color-primary-400);
			box-shadow: 0 0 0 3px var(--color-primary-200);
		}

		.help-text {
			color: var(--color-neutral-600);
		}

		#tinymce-container {
			background: var(--color-neutral-200);
			border-color: var(--color-neutral-400);
		}

		.tox .tox-editor-header {
			border-bottom-color: var(--color-neutral-400) !important;
		}

		.upload-status.success {
			color: var(--color-success-500);
		}

		.upload-status.error {
			color: var(--color-error-500);
		}

		.btn--secondary {
			background: var(--color-neutral-200);
			color: var(--color-neutral-900);
			border-color: var(--color-neutral-300);
		}

		.btn--secondary:hover:not(:disabled) {
			background: var(--color-neutral-100);
			border-color: var(--color-neutral-400);
		}

		.btn--ghost {
			color: var(--color-primary-400);
		}

		.btn--ghost:hover:not(:disabled) {
			background: var(--color-primary-100);
			color: var(--color-primary-700);
		}
	}

	/* Responsividade */
	@media (max-width: 768px) {
		.admin-header-content {
			flex-direction: column;
			gap: var(--space-4);
			text-align: center;
		}

		.form-actions {
			flex-direction: column;
		}

		.upload-section {
			flex-direction: column;
			align-items: stretch;
		}
	}
</style>

<script>
	// Definir data atual como padr√£o
	document.getElementById("pubDate").valueAsDate = new Date();

	// Inicializar conversor HTML -> Markdown
	const turndownService = new TurndownService({
		codeBlockStyle: "fenced",
		headingStyle: "atx",
		emDelimiter: "*",
		strongDelimiter: "**",
	});

	// Configurar regras customizadas do Turndown
	turndownService.addRule("strikethrough", {
		filter: ["s", "strike", "del"],
		replacement: function (content) {
			return "~~" + content + "~~";
		},
	});

	// Vari√°vel para armazenar inst√¢ncia do TinyMCE
	let editor = null;

	// Inicializar TinyMCE
	tinymce.init({
		selector: "#content",
		license_key: "gpl",
		language: "pt_BR",
		language_url: "/js/tinymce/langs/pt_BR.js",
		height: 500,
		menubar: false,
		branding: false,
		promotion: false,
		plugins: [
			"advlist",
			"autolink",
			"lists",
			"link",
			"image",
			"charmap",
			"preview",
			"anchor",
			"searchreplace",
			"visualblocks",
			"code",
			"fullscreen",
			"insertdatetime",
			"media",
			"table",
			"help",
			"wordcount",
			"codesample",
		],
		toolbar:
			"undo redo | styles | bold italic underline strikethrough | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image media table | codesample blockquote hr | preview code fullscreen | help",
		toolbar_mode: "sliding",
		block_formats:
			"Par√°grafo=p; T√≠tulo 1=h1; T√≠tulo 2=h2; T√≠tulo 3=h3; T√≠tulo 4=h4; T√≠tulo 5=h5; T√≠tulo 6=h6; Cita√ß√£o=blockquote; C√≥digo=pre",
		content_style: `
			body { 
				font-family: system-ui, sans-serif; 
				font-size: 16px; 
				line-height: 1.6; 
				color: #333; 
				max-width: none; 
				margin: 0; 
				padding: 20px; 
			}
			h1, h2, h3, h4, h5, h6 { 
				color: #2c3e50; 
				margin-top: 1.5em; 
				margin-bottom: 0.5em; 
			}
			blockquote { 
				border-left: 4px solid #667eea; 
				padding-left: 1rem; 
				margin: 1rem 0; 
				font-style: italic; 
				color: #666; 
			}
			pre { 
				background: #f8f9fa; 
				padding: 1rem; 
				border-radius: 6px; 
				overflow-x: auto; 
				border: 1px solid #e9ecef; 
			}
			code { 
				background: #f8f9fa; 
				padding: 0.2rem 0.4rem; 
				border-radius: 3px; 
				font-family: 'Courier New', monospace; 
			}
			table { 
				border-collapse: collapse; 
				width: 100%; 
				margin: 1rem 0; 
			}
			table th, table td { 
				border: 1px solid #dee2e6; 
				padding: 0.75rem; 
				text-align: left; 
			}
			table th { 
				background: #f8f9fa; 
				font-weight: 600; 
			}
		`,
		setup: function (ed) {
			editor = ed;
			// Sincronizar conte√∫do automaticamente ao digitar
			ed.on("input keyup paste", function () {
				const htmlContent = ed.getContent();
				document.getElementById("content").value = htmlContent;
			});
		},
		init_instance_callback: function (ed) {
			editor = ed;
		},
	});

	// Formul√°rio de cria√ß√£o
	document
		.getElementById("create-form")
		.addEventListener("submit", async (e) => {
			e.preventDefault();

			const form = e.target;
			const messageContainer =
				document.getElementById("message-container");
			const submitBtn = form.querySelector('button[type="submit"]');

			// Sincronizar conte√∫do do TinyMCE com o textarea antes da valida√ß√£o
			if (editor) {
				const htmlContent = editor.getContent();
				document.getElementById("content").value = htmlContent;
			}

			// Limpar estilos de erro anteriores
			document.querySelectorAll(".field-error").forEach((field) => {
				field.classList.remove("field-error");
			});

			// Verificar se o conte√∫do foi preenchido
			const contentTextarea = document.getElementById("content");
			const heroImageInput = document.getElementById("heroImage");

			if (!contentTextarea.value.trim()) {
				messageContainer.innerHTML = `
					<div class="error-message">
						‚ö†Ô∏è O campo de conte√∫do √© obrigat√≥rio.
					</div>
				`;
				// Focar no editor TinyMCE
				if (editor) {
					editor.focus();
				}
				// Scroll para o topo do formul√°rio
				messageContainer.scrollIntoView({
					behavior: "smooth",
					block: "center",
				});
				return;
			}

			if (!heroImageInput.value.trim()) {
				messageContainer.innerHTML = `
					<div class="error-message">
						üñºÔ∏è O campo de imagem de destaque √© obrigat√≥rio.
					</div>
				`;
				// Destacar o campo com erro
				heroImageInput.classList.add("field-error");
				// Focar no campo
				heroImageInput.focus();
				// Scroll para o campo
				heroImageInput.scrollIntoView({
					behavior: "smooth",
					block: "center",
				});
				return;
			}

			// Loading state
			form.classList.add("loading");
			submitBtn.textContent = "Criando...";
			messageContainer.innerHTML = "";

			try {
				const formData = new FormData(form);
				// Obter conte√∫do HTML do TinyMCE e converter para Markdown
				const htmlContent = editor ? editor.getContent() : "";
				const markdownContent = turndownService.turndown(htmlContent);

				const data = {
					title: formData.get("title"),
					description: formData.get("description"),
					pubDate: formData.get("pubDate"),
					heroImage: formData.get("heroImage"),
					content: markdownContent,
				};

				const response = await fetch("/api/posts", {
					method: "POST",
					headers: {
						"Content-Type": "application/json",
					},
					body: JSON.stringify(data),
				});

				if (response.ok) {
					const result = await response.json();
					messageContainer.innerHTML = `
					<div class="success-message">
						Post criado com sucesso! Redirecionando...
					</div>
				`;

					setTimeout(() => {
						window.location.href = "/admin";
					}, 1500);
				} else {
					const error = await response.json();
					throw new Error(error.message || "Erro ao criar post");
				}
			} catch (error) {
				messageContainer.innerHTML = `
				<div class="error-message">
					Erro: ${error.message}
				</div>
			`;
			} finally {
				form.classList.remove("loading");
				submitBtn.textContent = "Criar Post";
			}
		});

	// Bot√£o de preview
	document.getElementById("preview-btn").addEventListener("click", () => {
		const title = document.getElementById("title").value;
		const htmlContent = editor ? editor.getContent() : "";

		if (!title || !htmlContent) {
			const messageContainer =
				document.getElementById("message-container");
			messageContainer.innerHTML = `
				<div class="error-message">
					üëÅÔ∏è Preencha pelo menos o t√≠tulo e conte√∫do para visualizar
				</div>
			`;
			if (!title) {
				document.getElementById("title").focus();
			} else if (editor) {
				editor.focus();
			}
			messageContainer.scrollIntoView({
				behavior: "smooth",
				block: "center",
			});
			return;
		}

		// Abrir preview em nova aba com o conte√∫do HTML
		const previewWindow = window.open("", "_blank");
		previewWindow.document.write(`
			<html>
				<head>
					<title>Preview: ${title}</title>
					<meta charset="UTF-8">
					<style>
						body { 
							max-width: 800px; 
							margin: 0 auto; 
							padding: 2rem; 
							font-family: system-ui, sans-serif; 
							line-height: 1.6; 
							color: #333;
						}
						h1, h2, h3, h4, h5, h6 { 
							color: #2c3e50; 
							margin-top: 1.5em; 
							margin-bottom: 0.5em; 
						}
						h1 { font-size: 2rem; }
						h2 { font-size: 1.75rem; }
						h3 { font-size: 1.5rem; }
						blockquote { 
							border-left: 4px solid #667eea; 
							padding-left: 1rem; 
							margin: 1rem 0; 
							font-style: italic; 
							color: #666; 
						}
						pre { 
							background: #f8f9fa; 
							padding: 1rem; 
							border-radius: 6px; 
							overflow-x: auto; 
							border: 1px solid #e9ecef; 
						}
						code { 
							background: #f8f9fa; 
							padding: 0.2rem 0.4rem; 
							border-radius: 3px; 
							font-family: 'Courier New', monospace; 
						}
						table { 
							border-collapse: collapse; 
							width: 100%; 
							margin: 1rem 0; 
						}
						table th, table td { 
							border: 1px solid #dee2e6; 
							padding: 0.75rem; 
							text-align: left; 
						}
						table th { 
							background: #f8f9fa; 
							font-weight: 600; 
						}
						img { 
							max-width: 100%; 
							height: auto; 
							border-radius: 6px; 
						}
					</style>
				</head>
				<body>
					<h1>${title}</h1>
					<div>${htmlContent}</div>
				</body>
			</html>
		`);
	});

	// Funcionalidade de upload de imagem
	document.getElementById("selectImageBtn").addEventListener("click", () => {
		document.getElementById("imageUpload").click();
	});

	document
		.getElementById("imageUpload")
		.addEventListener("change", async (e) => {
			const file = e.target.files[0];
			if (!file) return;

			const uploadStatus = document.getElementById("uploadStatus");
			const heroImageInput = document.getElementById("heroImage");

			// Mostrar status de carregamento
			uploadStatus.textContent = "Fazendo upload...";
			uploadStatus.className = "upload-status loading";

			try {
				const formData = new FormData();
				formData.append("image", file);

				const response = await fetch("/api/upload-image", {
					method: "POST",
					body: formData,
				});

				const result = await response.json();

				if (result.success) {
					// Atualizar o campo heroImage com o caminho da imagem
					heroImageInput.value = result.path;

					// Mostrar informa√ß√µes de otimiza√ß√£o
					const optimization = result.optimization;
					uploadStatus.innerHTML = `
						‚úÖ <strong>${result.filename}</strong><br>
						üì¶ ${optimization.originalSize} ‚Üí ${optimization.optimizedSize} 
						(${optimization.reduction} menor)
					`;
					uploadStatus.className = "upload-status success";
				} else {
					throw new Error(result.message);
				}
			} catch (error) {
				uploadStatus.textContent = `‚ùå ${error.message}`;
				uploadStatus.className = "upload-status error";
			}

			// Limpar o input file para permitir nova sele√ß√£o
			e.target.value = "";
		});
</script>
