---
import { getCollection } from "astro:content";
import BaseHead from "../../components/BaseHead.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../consts";
import FormattedDate from "../../components/FormattedDate.astro";

const posts = (await getCollection("blog")).sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);
---

<!doctype html>
<html lang="pt-br">
	<head>
		<BaseHead
			title={`Admin - ${SITE_TITLE}`}
			description={SITE_DESCRIPTION}
		/>
		<style>
			.admin-container {
				max-width: 1200px;
				margin: 0 auto;
				padding: 2rem;
			}

			.admin-header {
				display: flex;
				justify-content: space-between;
				align-items: center;
				margin-bottom: 2rem;
				padding-bottom: 1rem;
				border-bottom: 2px solid #e1e5e9;
			}

			.admin-title {
				font-size: 2.5rem;
				font-weight: bold;
				color: #2c3e50;
			}

			.btn {
				display: inline-block;
				padding: 0.75rem 1.5rem;
				border-radius: 8px;
				text-decoration: none;
				font-weight: 600;
				transition: all 0.3s ease;
				border: none;
				cursor: pointer;
			}

			.btn-primary {
				background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
				color: white;
			}

			.btn-primary:hover {
				transform: translateY(-2px);
				box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
			}

			.btn-secondary {
				background: #f8f9fa;
				color: #495057;
				border: 1px solid #dee2e6;
			}

			.btn-secondary:hover {
				background: #e9ecef;
			}

			.btn-danger {
				background: #dc3545;
				color: white;
			}

			.btn-danger:hover {
				background: #c82333;
			}

			.posts-grid {
				display: grid;
				grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
				gap: 1.5rem;
				margin-top: 2rem;
			}

			.post-card {
				background: white;
				border-radius: 12px;
				padding: 1.5rem;
				box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
				transition:
					transform 0.3s ease,
					box-shadow 0.3s ease;
				border: 1px solid #e1e5e9;
			}

			.post-card:hover {
				transform: translateY(-5px);
				box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
			}

			.post-title {
				font-size: 1.25rem;
				font-weight: 600;
				margin-bottom: 0.5rem;
				color: #2c3e50;
			}

			.post-description {
				color: #6c757d;
				margin-bottom: 1rem;
				line-height: 1.5;
			}

			.post-meta {
				display: flex;
				justify-content: space-between;
				align-items: center;
				margin-bottom: 1rem;
				font-size: 0.875rem;
				color: #6c757d;
			}

			.post-actions {
				display: flex;
				gap: 0.5rem;
			}

			.btn-sm {
				padding: 0.5rem 1rem;
				font-size: 0.875rem;
			}

			.no-posts {
				text-align: center;
				padding: 4rem 2rem;
				color: #6c757d;
			}

			.no-posts h3 {
				font-size: 1.5rem;
				margin-bottom: 1rem;
			}
		</style>
	</head>
	<body>
		<Header />
		<main>
			<div class="admin-container">
				<div class="admin-header">
					<h1 class="admin-title">Administração do Blog</h1>
					<a href="/admin/create" class="btn btn-primary">
						+ Criar Novo Post
					</a>
				</div>
			</div>

			{
				posts.length === 0 ? (
					<div class="no-posts">
						<h3>Nenhum post encontrado</h3>
						<p>Comece criando seu primeiro post!</p>
						<a href="/admin/create" class="btn btn-primary">
							Criar Primeiro Post
						</a>
					</div>
				) : (
					<div class="posts-grid">
						{posts.map((post) => (
							<article class="post-card">
								<h3 class="post-title">{post.data.title}</h3>
								<p class="post-description">
									{post.data.description}
								</p>
								<div class="post-meta">
									<span>
										Publicado:{" "}
										<FormattedDate
											date={post.data.pubDate}
										/>
									</span>
									{post.data.updatedDate && (
										<span>
											Atualizado:{" "}
											<FormattedDate
												date={post.data.updatedDate}
											/>
										</span>
									)}
								</div>
								<div class="post-actions">
									<a
										href={`/blog/${post.id}`}
										class="btn btn-secondary btn-sm"
									>
										Ver Post
									</a>
									<a
										href={`/admin/edit/${post.id}`}
										class="btn btn-primary btn-sm"
									>
										Editar
									</a>
									<button
										class="btn btn-danger btn-sm delete-btn"
										data-post-id={post.id}
										data-post-title={post.data.title}
									>
										Deletar
									</button>
								</div>
							</article>
						))}
					</div>
				)
			}
		</main>

		<Footer />

		<script>
			// Confirmar deleção de posts
			document.querySelectorAll(".delete-btn").forEach((btn) => {
				btn.addEventListener("click", async (e) => {
					const postId = e.target.dataset.postId;
					const postTitle = e.target.dataset.postTitle;

					if (
						confirm(
							`Tem certeza que deseja deletar o post "${postTitle}"?`,
						)
					) {
						try {
							const response = await fetch(
								`/api/posts/${postId}`,
								{
									method: "DELETE",
								},
							);

							if (response.ok) {
								location.reload();
							} else {
								alert(
									"Erro ao deletar o post. Tente novamente.",
								);
							}
						} catch (error) {
							alert("Erro ao deletar o post. Tente novamente.");
						}
					}
				});
			});
		</script>
	</body>
</html>
