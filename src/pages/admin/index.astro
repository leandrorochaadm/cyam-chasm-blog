---
import { getCollection } from "astro:content";
import BaseLayout from "../../layouts/BaseLayout.astro";
import Card from "../../components/ui/Card.astro";
import Button from "../../components/ui/Button.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../consts";
import FormattedDate from "../../components/FormattedDate.astro";

const posts = (await getCollection("blog")).sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);
---

<BaseLayout
	title={`Admin - ${SITE_TITLE}`}
	description={SITE_DESCRIPTION}
	class="admin-page"
>
	<section class="admin-header">
		<div class="admin-header-content">
			<h1 class="admin-title">Administra√ß√£o do Blog</h1>
			<Button href="/admin/create" variant="primary">
				+ Criar Novo Post
			</Button>
		</div>
	</section>

	{
		posts.length === 0 ? (
			<section class="no-posts">
				<Card variant="outlined" padding="lg" class="no-posts-card">
					<h3>Nenhum post encontrado</h3>
					<p>Comece criando seu primeiro post!</p>
					<Button href="/admin/create" variant="primary">
						Criar Primeiro Post
					</Button>
				</Card>
			</section>
		) : (
			<section class="posts-grid">
				{posts.map((post) => (
					<Card variant="elevated" padding="lg">
						<h3>üìù {post.data.title}</h3>
						<p>{post.data.description}</p>
						<p class="post-meta">
							Publicado:{" "}
							<FormattedDate date={post.data.pubDate} />
							{post.data.updatedDate && (
								<>
									<br />
									Atualizado:{" "}
									<FormattedDate
										date={post.data.updatedDate}
									/>
								</>
							)}
						</p>
						<div class="post-actions">
							<Button
								href={`/blog/${post.id}`}
								variant="ghost"
								size="sm"
							>
								Ver Post
							</Button>
							<Button
								href={`/admin/edit/${post.id}`}
								variant="primary"
								size="sm"
							>
								Editar
							</Button>
							<button
								class="btn btn--danger btn--sm delete-btn"
								data-post-id={post.id}
								data-post-title={post.data.title}
								type="button"
							>
								Deletar
							</button>
						</div>
					</Card>
				))}
			</section>
		)
	}
</BaseLayout>

<style>
	.admin-page {
		padding-top: var(--space-4);
	}

	/* Admin Header */
	.admin-header {
		text-align: center;
		margin-bottom: var(--space-12);
	}

	.admin-header-content {
		max-width: 1000px;
		margin: 0 auto;
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding-bottom: var(--space-6);
		border-bottom: var(--border-width-2) solid var(--color-neutral-300);
	}

	.admin-title {
		font-size: clamp(var(--font-size-3xl), 5vw, var(--font-size-4xl));
		font-weight: var(--font-weight-extrabold);
		color: var(--color-neutral-900);
		margin: 0;
		line-height: var(--line-height-tight);
	}

	.posts-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
		gap: var(--space-6);
	}

	.posts-grid h3 {
		color: var(--color-neutral-900);
		margin-bottom: var(--space-3);
		font-size: var(--font-size-xl);
		font-weight: var(--font-weight-semibold);
	}

	.posts-grid p {
		color: var(--color-neutral-700);
		line-height: var(--line-height-relaxed);
		margin: 0;
	}

	.post-meta {
		margin-bottom: var(--space-4) !important;
		color: var(--color-neutral-600) !important;
		font-size: var(--font-size-sm) !important;
	}

	.post-actions {
		display: flex;
		gap: var(--space-2);
		flex-wrap: wrap;
	}

	/* Bot√µes inline */
	.btn {
		display: inline-flex;
		align-items: center;
		justify-content: center;
		gap: var(--space-2);
		border: var(--border-width-1) solid transparent;
		border-radius: var(--border-radius-lg);
		font-family: var(--font-family-primary);
		font-weight: var(--font-weight-medium);
		text-decoration: none;
		text-align: center;
		cursor: pointer;
		transition: var(--transition-all);
		white-space: nowrap;
		user-select: none;
		position: relative;
		overflow: hidden;
	}

	.btn--sm {
		padding: var(--space-2) var(--space-3);
		font-size: var(--font-size-sm);
		min-height: 2rem;
	}

	.btn--danger {
		background: linear-gradient(
			135deg,
			var(--color-error-500) 0%,
			var(--color-error-600) 100%
		);
		color: white;
		box-shadow: var(--shadow-sm);
	}

	.btn--danger:hover:not(:disabled) {
		background: linear-gradient(
			135deg,
			var(--color-error-600) 0%,
			var(--color-error-700) 100%
		);
		transform: translateY(-1px);
		box-shadow: var(--shadow-md);
	}

	/* No Posts */
	.no-posts {
		text-align: center;
		max-width: 600px;
		margin: var(--space-12) auto;
	}

	.no-posts-card {
		text-align: center;
		border: var(--border-width-2) dashed var(--color-neutral-300);
		background: var(--color-neutral-25);
	}

	.no-posts h3 {
		color: var(--color-neutral-900);
		font-size: var(--font-size-2xl);
		margin-bottom: var(--space-4);
	}

	.no-posts h3::before {
		content: "üìù";
		display: block;
		font-size: var(--font-size-4xl);
		margin-bottom: var(--space-3);
	}

	.no-posts p {
		color: var(--color-neutral-600);
		font-size: var(--font-size-lg);
		margin-bottom: var(--space-6);
	}

	/* Dark mode */
	@media (prefers-color-scheme: dark) {
		.admin-header-content {
			border-bottom-color: var(--color-neutral-400);
		}

		.admin-title {
			color: var(--color-neutral-900);
		}

		.posts-grid h3 {
			color: var(--color-neutral-900);
		}

		.posts-grid p {
			color: var(--color-neutral-800);
		}

		.post-meta {
			color: var(--color-neutral-600) !important;
		}

		.no-posts-card {
			border-color: var(--color-neutral-400);
			background: var(--color-neutral-100);
		}

		.no-posts h3 {
			color: var(--color-neutral-900);
		}

		.no-posts p {
			color: var(--color-neutral-700);
		}
	}

	/* Responsividade */
	@media (max-width: 768px) {
		.admin-header-content {
			flex-direction: column;
			gap: var(--space-4);
			text-align: center;
		}

		.posts-grid {
			grid-template-columns: 1fr;
			gap: var(--space-4);
		}

		.post-actions {
			flex-direction: column;
		}
	}
</style>

<script>
	// Confirmar dele√ß√£o de posts
	document.querySelectorAll(".delete-btn").forEach((btn) => {
		btn.addEventListener("click", async (e) => {
			const target = e.target as HTMLButtonElement;
			const postId = target?.dataset.postId;
			const postTitle = target?.dataset.postTitle;

			if (!postId || !postTitle) return;

			if (
				confirm(`Tem certeza que deseja deletar o post "${postTitle}"?`)
			) {
				try {
					const response = await fetch(`/api/posts/${postId}`, {
						method: "DELETE",
					});

					if (response.ok) {
						location.reload();
					} else {
						alert("Erro ao deletar o post. Tente novamente.");
					}
				} catch (error) {
					alert("Erro ao deletar o post. Tente novamente.");
				}
			}
		});
	});
</script>
