---
export const prerender = false;

import { getCollection, getEntry } from "astro:content";
import BaseHead from "../../../components/BaseHead.astro";
import Header from "../../../components/Header.astro";
import Footer from "../../../components/Footer.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../../consts";

const { slug } = Astro.params;

if (!slug) {
	return Astro.redirect("/admin");
}

let post;
try {
	post = await getEntry("blog", slug);
} catch (error) {
	console.error("Error fetching post:", error);
}

if (!post) {
	return Astro.redirect("/admin");
}

// Ler o conte√∫do do arquivo original
import fs from "fs";
import path from "path";

const filePath = path.join(
	process.cwd(),
	"src",
	"content",
	"blog",
	`${slug}.md`,
);
let fileContent = "";
let frontmatterContent = "";
let originalHeroImage = "";

try {
	const fullContent = fs.readFileSync(filePath, "utf-8");
	const frontmatterMatch = fullContent.match(/^---\n(.*?)\n---\n(.*)/s);

	if (frontmatterMatch) {
		frontmatterContent = frontmatterMatch[1];
		fileContent = frontmatterMatch[2];

		// Extrair heroImage original do frontmatter para evitar transforma√ß√£o do Astro
		const heroImageMatch = frontmatterContent.match(
			/heroImage:\s*['"]([^'"]*)['"]/,
		);
		if (heroImageMatch) {
			originalHeroImage = heroImageMatch[1];
		}
	} else {
		fileContent = fullContent;
	}
} catch (error) {
	console.error("Error reading file:", error);
	fileContent = "Erro ao carregar conte√∫do do arquivo.";
}
---

<!doctype html>
<html lang="pt-br">
	<head>
		<BaseHead
			title={`Editar: ${post.data.title} - Admin - ${SITE_TITLE}`}
			description={SITE_DESCRIPTION}
		/>
		<!-- TinyMCE ser√° carregado via CDN -->
		<script
			is:inline
			src="https://cdn.jsdelivr.net/npm/tinymce@7/tinymce.min.js"
		></script>
		<script
			is:inline
			src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
		<script is:inline src="https://unpkg.com/turndown/dist/turndown.js"
		></script>
		<style>
			.admin-container {
				max-width: 800px;
				margin: 0 auto;
				padding: 2rem;
			}

			.admin-header {
				display: flex;
				justify-content: space-between;
				align-items: center;
				margin-bottom: 2rem;
				padding-bottom: 1rem;
				border-bottom: 2px solid #e1e5e9;
			}

			.admin-title {
				font-size: 2rem;
				font-weight: bold;
				color: #2c3e50;
			}

			.btn {
				display: inline-block;
				padding: 0.75rem 1.5rem;
				border-radius: 8px;
				text-decoration: none;
				font-weight: 600;
				transition: all 0.3s ease;
				border: none;
				cursor: pointer;
			}

			.btn-secondary {
				background: #f8f9fa;
				color: #495057;
				border: 1px solid #dee2e6;
			}

			.btn-secondary:hover {
				background: #e9ecef;
			}

			.btn-primary {
				background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
				color: white;
			}

			.btn-primary:hover {
				transform: translateY(-2px);
				box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
			}

			.btn-warning {
				background: #ffc107;
				color: #212529;
			}

			.btn-warning:hover {
				background: #e0a800;
			}

			.form-container {
				background: white;
				border-radius: 12px;
				padding: 2rem;
				box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
				border: 1px solid #e1e5e9;
			}

			.form-group {
				margin-bottom: 1.5rem;
			}

			.form-label {
				display: block;
				margin-bottom: 0.5rem;
				font-weight: 600;
				color: #2c3e50;
			}

			.form-input {
				width: 100%;
				padding: 0.75rem;
				border: 1px solid #dee2e6;
				border-radius: 6px;
				font-size: 1rem;
				transition: border-color 0.3s ease;
			}

			.form-input:focus {
				outline: none;
				border-color: #667eea;
				box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
			}

			.form-textarea {
				min-height: 400px;
				font-family: "SF Mono", "Monaco", "Inconsolata", "Roboto Mono",
					monospace;
				resize: vertical;
				line-height: 1.6;
				font-size: 14px;
			}

			.form-actions {
				display: flex;
				gap: 1rem;
				justify-content: flex-end;
				margin-top: 2rem;
			}

			.loading {
				opacity: 0.6;
				pointer-events: none;
			}

			.error-message {
				background: #f8d7da;
				color: #721c24;
				padding: 0.75rem;
				border-radius: 6px;
				margin-bottom: 1rem;
				border: 1px solid #f5c6cb;
			}

			.success-message {
				background: #d4edda;
				color: #155724;
				padding: 0.75rem;
				border-radius: 6px;
				margin-bottom: 1rem;
				border: 1px solid #c3e6cb;
			}

			.help-text {
				font-size: 0.875rem;
				color: #6c757d;
				margin-top: 0.25rem;
			}

			/* TinyMCE Customization */
			#tinymce-container {
				border: 1px solid #dee2e6;
				border-radius: 6px;
				overflow: hidden;
			}

			.tox .tox-editor-header {
				border-bottom: 1px solid #dee2e6 !important;
			}

			.tox-tinymce {
				border: none !important;
				border-radius: 6px !important;
			}

			.post-info {
				background: #f8f9fa;
				padding: 1rem;
				border-radius: 6px;
				margin-bottom: 1.5rem;
				border: 1px solid #dee2e6;
			}

			.post-info h3 {
				margin: 0 0 0.5rem 0;
				color: #495057;
			}

			.post-info p {
				margin: 0;
				font-size: 0.875rem;
				color: #6c757d;
			}

			.image-upload-container {
				display: flex;
				flex-direction: column;
				gap: 0.5rem;
			}

			.upload-section {
				display: flex;
				align-items: center;
				gap: 1rem;
			}

			.upload-btn {
				white-space: nowrap;
			}

			.upload-status {
				font-size: 0.875rem;
				font-weight: 500;
			}

			.upload-status.success {
				color: #28a745;
			}

			.upload-status.error {
				color: #dc3545;
			}

			.upload-status.loading {
				color: #6c757d;
			}
		</style>
	</head>
	<body>
		<Header />
		<main>
			<div class="admin-container">
				<div class="admin-header">
					<h1 class="admin-title">Editar Post</h1>
					<div style="display: flex; gap: 0.5rem;">
						<a href={`/blog/${slug}`} class="btn btn-warning">
							Ver Post
						</a>
						<a href="/admin" class="btn btn-secondary">
							‚Üê Voltar ao Admin
						</a>
					</div>
				</div>

				<div class="form-container">
					<div class="post-info">
						<h3>Editando: {post.data.title}</h3>
						<p>Arquivo: /src/content/blog/{slug}.md</p>
					</div>

					<div id="message-container"></div>

					<form id="edit-form">
						<input
							type="hidden"
							id="slug"
							name="slug"
							value={slug}
						/>

						<div class="form-group">
							<label for="title" class="form-label"
								>T√≠tulo *</label
							>
							<input
								type="text"
								id="title"
								name="title"
								class="form-input"
								required
								value={post.data.title}
							/>
						</div>

						<div class="form-group">
							<label for="description" class="form-label"
								>Descri√ß√£o *</label
							>
							<input
								type="text"
								id="description"
								name="description"
								class="form-input"
								required
								value={post.data.description}
							/>
							<div class="help-text">
								Esta descri√ß√£o aparecer√° nas meta tags e
								listagem de posts
							</div>
						</div>

						<div class="form-group">
							<label for="pubDate" class="form-label"
								>Data de Publica√ß√£o *</label
							>
							<input
								type="date"
								id="pubDate"
								name="pubDate"
								class="form-input"
								required
								value={post.data.pubDate
									.toISOString()
									.split("T")[0]}
							/>
						</div>

						<div class="form-group">
							<label for="updatedDate" class="form-label"
								>Data de Atualiza√ß√£o</label
							>
							<input
								type="date"
								id="updatedDate"
								name="updatedDate"
								class="form-input"
								value={post.data.updatedDate
									? post.data.updatedDate
											.toISOString()
											.split("T")[0]
									: ""}
							/>
							<div class="help-text">
								Deixe em branco para n√£o mostrar data de
								atualiza√ß√£o
							</div>
						</div>

						<div class="form-group">
							<label for="heroImage" class="form-label"
								>Imagem de Destaque</label
							>
							<div class="image-upload-container">
								<input
									type="text"
									id="heroImage"
									name="heroImage"
									class="form-input"
									value={originalHeroImage || ""}
									placeholder="../../assets/blog-placeholder-1.jpg"
									readonly
								/>
								<div class="upload-section">
									<input
										type="file"
										id="imageUpload"
										accept="image/jpeg,image/jpg,image/png,image/webp"
										style="display: none;"
									/>
									<button
										type="button"
										id="selectImageBtn"
										class="btn btn-secondary upload-btn"
									>
										üìÅ Selecionar Imagem
									</button>
									<span
										id="uploadStatus"
										class="upload-status"></span>
								</div>
							</div>
							<div class="help-text">
								Selecione uma imagem do seu computador (ser√°
								automaticamente otimizada e convertida para
								WebP) ou digite o caminho manualmente (opcional)
							</div>
						</div>

						<div class="form-group">
							<label for="content" class="form-label"
								>Conte√∫do *</label
							>

							<div id="tinymce-container">
								<textarea id="content" name="content" required
									>{fileContent.trim()}</textarea
								>
							</div>
							<div class="help-text">
								Use a barra de ferramentas do editor para
								formata√ß√£o visual. O conte√∫do ser√° convertido
								automaticamente para Markdown.
							</div>
						</div>

						<div class="form-actions">
							<button
								type="button"
								id="preview-btn"
								class="btn btn-secondary"
							>
								Visualizar
							</button>
							<button type="submit" class="btn btn-primary">
								Salvar Altera√ß√µes
							</button>
						</div>
					</form>
				</div>
			</div>
		</main>
		<Footer />

		<script>
			// Configurar marked para convers√£o Markdown -> HTML
			marked.setOptions({
				breaks: true,
				gfm: true,
			});

			// Inicializar conversor HTML -> Markdown
			const turndownService = new TurndownService({
				codeBlockStyle: "fenced",
				headingStyle: "atx",
				emDelimiter: "*",
				strongDelimiter: "**",
			});

			// Configurar regras customizadas do Turndown
			turndownService.addRule("strikethrough", {
				filter: ["s", "strike", "del"],
				replacement: function (content) {
					return "~~" + content + "~~";
				},
			});

			// Vari√°vel para armazenar inst√¢ncia do TinyMCE
			let editor = null;

			// Obter conte√∫do markdown do textarea e converter para HTML
			const markdownContent = document.getElementById("content").value;
			const initialHtmlContent = marked.parse(markdownContent);

			// Converter Markdown inicial para HTML para exibir no TinyMCE
			const initialMarkdown = document.getElementById("content").value;
			const initialHtml = marked.parse(initialMarkdown);

			// Inicializar TinyMCE
			tinymce.init({
				selector: "#content",
				height: 500,
				menubar: false,
				branding: false,
				promotion: false,
				plugins: [
					"advlist",
					"autolink",
					"lists",
					"link",
					"image",
					"charmap",
					"preview",
					"anchor",
					"searchreplace",
					"visualblocks",
					"code",
					"fullscreen",
					"insertdatetime",
					"media",
					"table",
					"help",
					"wordcount",
					"codesample",
				],
				toolbar:
					"undo redo | styles | bold italic underline strikethrough | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image media table | codesample blockquote hr | preview code fullscreen | help",
				toolbar_mode: "sliding",
				block_formats:
					"Par√°grafo=p; T√≠tulo 1=h1; T√≠tulo 2=h2; T√≠tulo 3=h3; T√≠tulo 4=h4; T√≠tulo 5=h5; T√≠tulo 6=h6; Cita√ß√£o=blockquote; C√≥digo=pre",
				content_style: `
					body { 
						font-family: system-ui, sans-serif; 
						font-size: 16px; 
						line-height: 1.6; 
						color: #333; 
						max-width: none; 
						margin: 0; 
						padding: 20px; 
					}
					h1, h2, h3, h4, h5, h6 { 
						color: #2c3e50; 
						margin-top: 1.5em; 
						margin-bottom: 0.5em; 
					}
					blockquote { 
						border-left: 4px solid #667eea; 
						padding-left: 1rem; 
						margin: 1rem 0; 
						font-style: italic; 
						color: #666; 
					}
					pre { 
						background: #f8f9fa; 
						padding: 1rem; 
						border-radius: 6px; 
						overflow-x: auto; 
						border: 1px solid #e9ecef; 
					}
					code { 
						background: #f8f9fa; 
						padding: 0.2rem 0.4rem; 
						border-radius: 3px; 
						font-family: 'Courier New', monospace; 
					}
					table { 
						border-collapse: collapse; 
						width: 100%; 
						margin: 1rem 0; 
					}
					table th, table td { 
						border: 1px solid #dee2e6; 
						padding: 0.75rem; 
						text-align: left; 
					}
					table th { 
						background: #f8f9fa; 
						font-weight: 600; 
					}
				`,
				language: "pt_BR",
				setup: function (ed) {
					editor = ed;
					// Definir o conte√∫do inicial convertido de markdown para HTML
					ed.on("init", function () {
						ed.setContent(initialHtmlContent);
					});
				},
				init_instance_callback: function (ed) {
					editor = ed;
				},
			});

			// Formul√°rio de edi√ß√£o
			document
				.getElementById("edit-form")
				.addEventListener("submit", async (e) => {
					e.preventDefault();

					const form = e.target;
					const messageContainer =
						document.getElementById("message-container");
					const submitBtn = form.querySelector(
						'button[type="submit"]',
					);

					// Loading state
					form.classList.add("loading");
					submitBtn.textContent = "Salvando...";
					messageContainer.innerHTML = "";

					try {
						const formData = new FormData(form);
						// Obter conte√∫do HTML do TinyMCE e converter para Markdown
						const htmlContent = editor ? editor.getContent() : "";
						const markdownContent =
							turndownService.turndown(htmlContent);

						const data = {
							slug: formData.get("slug"),
							title: formData.get("title"),
							description: formData.get("description"),
							pubDate: formData.get("pubDate"),
							updatedDate:
								formData.get("updatedDate") || undefined,
							heroImage: formData.get("heroImage") || undefined,
							content: markdownContent,
						};

						// Definir data de atualiza√ß√£o automaticamente se n√£o informada
						if (!data.updatedDate) {
							data.updatedDate = new Date()
								.toISOString()
								.split("T")[0];
						}

						const response = await fetch(
							`/api/posts/${data.slug}`,
							{
								method: "PUT",
								headers: {
									"Content-Type": "application/json",
								},
								body: JSON.stringify(data),
							},
						);

						if (response.ok) {
							messageContainer.innerHTML = `
							<div class="success-message">
								Post atualizado com sucesso!
							</div>
						`;

							// Atualizar data de atualiza√ß√£o no formul√°rio
							if (!formData.get("updatedDate")) {
								document.getElementById("updatedDate").value =
									data.updatedDate;
							}
						} else {
							const error = await response.json();
							throw new Error(
								error.message || "Erro ao atualizar post",
							);
						}
					} catch (error) {
						messageContainer.innerHTML = `
						<div class="error-message">
							Erro: ${error.message}
						</div>
					`;
					} finally {
						form.classList.remove("loading");
						submitBtn.textContent = "Salvar Altera√ß√µes";
					}
				});

			// Bot√£o de preview
			document
				.getElementById("preview-btn")
				.addEventListener("click", () => {
					const title = document.getElementById("title").value;
					const htmlContent = editor ? editor.getContent() : "";

					if (!title || !htmlContent) {
						alert(
							"Preencha pelo menos o t√≠tulo e conte√∫do para visualizar",
						);
						return;
					}

					// Abrir preview em nova aba com o conte√∫do HTML
					const previewWindow = window.open("", "_blank");
					previewWindow.document.write(`
					<html>
						<head>
							<title>Preview: ${title}</title>
							<meta charset="UTF-8">
							<style>
								body { 
									max-width: 800px; 
									margin: 0 auto; 
									padding: 2rem; 
									font-family: system-ui, sans-serif; 
									line-height: 1.6; 
									color: #333;
								}
								h1, h2, h3, h4, h5, h6 { 
									color: #2c3e50; 
									margin-top: 1.5em; 
									margin-bottom: 0.5em; 
								}
								h1 { font-size: 2rem; }
								h2 { font-size: 1.75rem; }
								h3 { font-size: 1.5rem; }
								blockquote { 
									border-left: 4px solid #667eea; 
									padding-left: 1rem; 
									margin: 1rem 0; 
									font-style: italic; 
									color: #666; 
								}
								pre { 
									background: #f8f9fa; 
									padding: 1rem; 
									border-radius: 6px; 
									overflow-x: auto; 
									border: 1px solid #e9ecef; 
								}
								code { 
									background: #f8f9fa; 
									padding: 0.2rem 0.4rem; 
									border-radius: 3px; 
									font-family: 'Courier New', monospace; 
								}
								table { 
									border-collapse: collapse; 
									width: 100%; 
									margin: 1rem 0; 
								}
								table th, table td { 
									border: 1px solid #dee2e6; 
									padding: 0.75rem; 
									text-align: left; 
								}
								table th { 
									background: #f8f9fa; 
									font-weight: 600; 
								}
								img { 
									max-width: 100%; 
									height: auto; 
									border-radius: 6px; 
								}
							</style>
						</head>
						<body>
							<h1>${title}</h1>
							<div>${htmlContent}</div>
						</body>
					</html>
				`);
				});

			// Funcionalidade de upload de imagem
			document
				.getElementById("selectImageBtn")
				.addEventListener("click", () => {
					document.getElementById("imageUpload").click();
				});

			document
				.getElementById("imageUpload")
				.addEventListener("change", async (e) => {
					const file = e.target.files[0];
					if (!file) return;

					const uploadStatus =
						document.getElementById("uploadStatus");
					const heroImageInput = document.getElementById("heroImage");

					// Mostrar status de carregamento
					uploadStatus.textContent = "Fazendo upload...";
					uploadStatus.className = "upload-status loading";

					try {
						const formData = new FormData();
						formData.append("image", file);

						const response = await fetch("/api/upload-image", {
							method: "POST",
							body: formData,
						});

						const result = await response.json();

						if (result.success) {
							// Atualizar o campo heroImage com o caminho da imagem
							heroImageInput.value = result.path;

							// Mostrar informa√ß√µes de otimiza√ß√£o
							const optimization = result.optimization;
							uploadStatus.innerHTML = `
								‚úÖ <strong>${result.filename}</strong><br>
								üì¶ ${optimization.originalSize} ‚Üí ${optimization.optimizedSize} 
								(${optimization.reduction} menor)
							`;
							uploadStatus.className = "upload-status success";
						} else {
							throw new Error(result.message);
						}
					} catch (error) {
						uploadStatus.textContent = `‚ùå ${error.message}`;
						uploadStatus.className = "upload-status error";
					}

					// Limpar o input file para permitir nova sele√ß√£o
					e.target.value = "";
				});
		</script>
	</body>
</html>
